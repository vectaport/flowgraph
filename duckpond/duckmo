#! /usr/bin/env comterp_run
#
# duckmo  set up to animate ducks moving
#

/* command line help */
if(arg(1)=="help" || arg(1)=="-h" || /*arg(1)==nil ||*/ arg(1)=="?" ||
  arg(1)=="-help" || arg(1)=="--help" || arg(1)=="-?" :then
  
    print("duckmo  set up to animate ducks moving\n");
    print("Usage:  duckmo --prequit\n\n");
    print("--prequit\tonly close previous copy of comdraw\n");
    exit)

prequit_flag=false
dummy2_flag=false
for(i=1 i<narg() i++
  switch(substr(arg(i) 2 :after)
    :prequit prequit_flag=true
    :dummmy2 dummy2_flag=true;if(substr(arg(i+1) 2)=="--" :then continue);i++;dummy2_val=arg(i)
    :default print("duckmo:  Unknown argument %s\n" arg(i) :err)))


sock=socket("localhost" 20002)

if(prequit_flag :then
  remote(sock "exit\n");
  exit)

cmdstr =
" \
global(ducks)=list();global(duckcnt)=0;handles(false); \
import(\"DuckNest.drs\"); move(-500 0);\
import(\"DuckNest.drs\"); move(500 0);\
import(\"DuckPond.drs\"); move(-200 0);\
import(\"DuckPond.drs\"); move(200 0);\
tock=func( \
  tockstr=print(\"t:%d  \" t :str); \
  for(ii=0 ii<size(ducks) ii=ii+1 \
    dal = at(ducks ii); \
    if(dal == nil :then continue); \
    if(dal.duck != nil && size(dal.stepl)>0 :then \
      tal=at(dal.stepl 0); \
      tr=trans(dal.duck); \
      if(tr==nil :then tr=1.,0.,0.,1.,0.,0.); \
      ddx=tal.dx+if(dal.ox>100 :then -2 :else if(dal.ox<-100 :then 2 :else 0));  \
      ddy=tal.dy+if(dal.oy>100 :then -2 :else if(dal.oy<-100 :then 2 :else 0));  \
      at(tr 4 :set at(tr 4)+ddx); \
      at(tr 5 :set at(tr 5)+ddy); \
      dal.ox=ddx+dal.ox; \
      dal.oy=ddy+dal.oy; \
      tal.nsteps=tal.nsteps-1; \
      if(tal.nsteps==0 :then \
        newstepl=list(); \
        jjmax=size(dal.stepl); \
        for(jj=1 jj<jjmax jj++ newstepl,at(dal.stepl jj)); \
        dal.stepl=newstepl); \
      dal.tick = t; \
      tockstr=tockstr,print(\"ID:%d ddx,ddy=%d,%d ox,oy=%d,%d nsteps=%d\" ii ddx ddy dal.ox dal.oy tal.nsteps :str); \
      trans(dal.duck tr))); \
  update;tockstr \
)"

print(cmdstr :prefix "")
remote(sock cmdstr)

i=0
while(1
  print(remote(sock print("tock(:t %d)" i :str)));print("\n");usleep(1+33333*0);i++)
